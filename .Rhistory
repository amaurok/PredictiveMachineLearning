library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(inTrain)
head(inTrain)
inTrain
adData
head(adData)
grep("IL", names(training), value=TRUE)
headers <- grep("IL", names(training), value=TRUE)
class(headers)
headers <- as.factor(headers)
class(headers)
subSet <- training[,headers]
subSet
subSet <- training[headers]
subSet
myvars <- c("v1", "v2", "v3")
class(myvars)
headers <- grep("IL", names(training), value=TRUE)
subSet <- training[headers]
subSet
preProc <‐ preProcess(subSet,method="pca",thresh = 0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
diagnosis
headers <- grep("IL", names(predictors), value=TRUE)
headers
class(headers)
newPredictors <- predictors[headers]
newPredictors
adData = data.frame(diagnosis,newPredictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(newPredictors,method="pca",thresh = 0.8)
preProc
class(preProc)
adData
adData = data.frame(diagnosis,newPredictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
newTrainingSet <- predict(preProc, newPredictors)
newTrainingSet
modelFit <- train(training$type ~ .,method="glm",data=newTrainingSet)
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=newTrainingSet)
newTrainingSet
newPredictors
preProc <- preProcess(training,method="pca",pcaComp=7)
training
training[,-1]
preProc <- preProcess(training[,-1],method="pca",pcaComp=7)
newTrainingSet <- predict(preProc,training[,-1])
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=newTrainingSet)
install.packages("e1071")
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=newTrainingSet)
newTestSet <- predict(preProc,testing[,-1])
confusionMatrix(testing$diagnosis,predict(modelFit1,newTestSet))
modelFit2 <- train(diagnosis ~.,data=training, method="glm")
predictions <- predict(modelFit2,newdata=testing)
confusionMatrix(predictions,testing$diagnosis)
training
testing
predictions <- predict(modelFit2,newdata=testing[,-1])
confusionMatrix(predictions,testing$diagnosis)
trainingSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
path <- getwd()
if(!file.exists(path)){
dir.create(path)
}
download.file(trainingSetUrl,file.path(path, trainingFileName))
download.file(trainingSetUrl,file.path(path, testFileName))
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c("NA",""))
head(trainingData)
trainingData$avg_yaw_forearm
dim(trainingData)
trainingData[sapply(x, function(x) !any(is.na(trainingData)))]
trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
head(trainingData)
names(trainingData)
head(training)
head(trainingData)
histogram(trainingData$classe)
hist(trainingData$classe)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
training <- file[inTrain,]
training <- trainingData[inTrain,]
testing <- trainingData[-inTrain,]
hist(training$classe)
training$classe
class(training$classe)
class(training$roll_belt)
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c("NA",""))
class(trainingData$classe)
hist(trainingData$classe)
trainingData$classe
hist(trainingData$classe)
hist(as.string(trainingData$classe))
hist(as.String(trainingData$classe))
hist(toString(trainingData$classe))
names(training)
M <- abs(cor(training[,-60]))
preProc <- preProcess(training[,-56],method="pca",thresh = 0.95)
class(training)
nums <- sapply(x[,-60], is.numeric)
nums <- sapply(training[,-60], is.numeric)
nums
training[,nums]
training <- training[,nums]
hist(training$classe)
hist(training)
head(testing)
head(training)
testing$X
names(training)
M <- abs(cor(training[,-57]))
hist(training)
hist(training[,-57])
hist(training$classe)
histogram(as.factor(training$classe))
qplot(training$classe)
qplot(testing$classe)
qplot(training$classe)
qplot(testing$classe)
M <- abs(cor(training[,-57]))
M
diag(M) <- 0
diag(M) <- 0
which(M > 0.8,arr.ind=T)
which(M > 0.9,arr.ind=T)
training
names(training)
preProc <- preProcess(training[,-56],method="pca",thresh = 0.8)
preProc <- preProcess(training[,-57],method="pca",thresh = 0.8)
preProc
preProc <- preProcess(training[,-57],method="pca",thresh = 0.95)
preProc
modelFit <- train(training$classe ~ .,method="glm",preProcess="pca",data=training)
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training)
library(caret)
trainingSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
path <- getwd()
if(!file.exists(path)){
dir.create(path)
}
download.file(trainingSetUrl,file.path(path, trainingFileName))
download.file(trainingSetUrl,file.path(path, testFileName))
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c("NA",""))
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
names(trainingData)
nums <- sapply(training[,-60], is.numeric)
nums <- sapply(trainingData[,-60], is.numeric)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
training <- trainingData[inTrain,]
testing <- trainingData[-inTrain,]
qplot(training$classe)
M <- abs(cor(training[,-57]))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
training
class(training$x)
class(training$X)
M <- abs(cor(training[,-57]))
head(training)
names(trainingData)
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c("NA",""))
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
names(trainingData)
nums <- sapply(trainingData[,-60], is.numeric)
nums
trainingData
head(nums)
names(nums)
nums$user_name
trainingData$name
trainingData$user_name
trainingData$roll_belt
head(trainingData[,nums])
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c("NA",""))
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
names(trainingData)
nums <- sapply(trainingData[,-60], is.numeric)
trainingData <- trainingData[,nums]
head(trainingData)
names(trainingData)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
training <- trainingData[inTrain,]
testing <- trainingData[-inTrain,]
qplot(training$classe)
qplot(testing$classe)
M <- abs(cor(training[,-57]))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training)
modelFit <- train(training$classe ~ .,data=training,method="rf",prox=TRUE)
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training)
data(iris);
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
trainingIris <- iris[inTrain,]
testingIris <-iris[‐inTrain,]
modFit <- train(Species~ .,data=trainingIris,method="rf",prox=TRUE)
modFit <- train(Species~ .,data=trainingIris,method="rf",prox=TRUE)
modFit
head(training)
training
sapply(training, function(x) any(is.na(x)))
training$X
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training)
warnings()
modelFit <- train(classe ~ .,method="rf",data=training)
modelFit <- train(classe ~ .,method="rf",data=training[,-1])
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c("NA",""))
emptyCells<-which(data_trainingData=="",arr.ind = TRUE)
emptyCells<-which(trainingData=="",arr.ind = TRUE)
emptyCells
head(emptyCells)
class(emptyCells)
trainingData$x
trainingData$X
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','',','#DIV/0!'))
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
head(trainingData)
class(trainingData$X)
head(trainingData)
head(trainingData$X)
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
head(trainingData)
nums <- sapply(trainingData[,-60], is.numeric)
trainingData <- trainingData[,nums]
nums <- sapply(trainingData[,-60], is.numeric)
trainingData <- trainingData[,nums]
head(trainingData)
trainingData <- trainingData[,-c(1,2,3)]
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
head(trainingData)
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
trainingFileName <- "pml-training.csv"
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
head(trainingData)
nums <- sapply(trainingData[,-60], is.numeric)
trainingData <- trainingData[,nums]
head(trainingData)
trainingData <- trainingData[,-c(1,2,3)]
head(trainingData)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
training <- trainingData[inTrain,]
testing <- trainingData[-inTrain,]
qplot(training$classe)
M <- abs(cor(training[,-57]))
head(training)
names(training)
M <- abs(cor(training[,-54]))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
modelFit <- train(classe ~ .,data=training,method="rf",prox=TRUE)
library(randomForest)
modelFit <- train(classe ~ .,data=training,method="rf",prox=TRUE)
preProc <- preProcess(training[,-54],method="pca",thresh = 0.9)
trainTransformed <- predict(preProc, training[,-54])
dim(trainTransformed)
modelFit <- train(training$classe ~ ., data = trainTransformed, method="rf")
training[!sapply(training, function(x) all(x == ""))]
training[sapply(training, function(x) all(x == ""))]
empty <- training[sapply(training, function(x) all(x == ""))]
head(empty)
empty[1,]
class(empty)
dim(empty)
empty <- trainingData[sapply(trainingData, function(x) all(x == ""))]
empty
trainingData[,!apply(trainingData, 2, function(x) all(gsub(" ", "", x)=="", na.rm=TRUE))]
trainingData[,apply(trainingData, 2, function(x) all(gsub(" ", "", x)=="", na.rm=TRUE))]
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
emptycols <- sapply(trainingData, function (k) all(is.na(k)))
emptycols
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
emptycols <- sapply(trainingData, function (k) all(is.na(k)))
emptycols
trainingData[!emptycols]
clear
clean
trainingFileName <- "pml-training.csv"
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
trainingData
names(trainingData)
nums <- sapply(trainingData[,-60], is.numeric)
trainingData <- trainingData[,nums]
names(trainingData)
trainingData <- trainingData[,-c(1,2,3)]
names(trainingData)
for(i in c(1:ncol(trainingData)-1)) {
trainingData[,i] = as.numeric(as.character(trainingData[,i]))
}
for(i in c(1:ncol(trainingData)-1)) {
}
for(f in names(trainigData)) {
class(trainingData$f)
}
for(f in names(trainingData)) {
class(trainingData$f)
}
for(f in names(trainingData)) {
print(class(trainingData$f))
}
class(trainingData$classe)
class(trainingData$magnet_arm_y)
for(i in c(1:ncol(trainingData)-1)) {
trainingData[,i] = as.numeric(as.character(trainingData[,i]))
}
for(i in c(1:ncol(trainingData)-1)) {
trainingData[,i] <- as.numeric(as.character(trainingData[,i]))
}
trainingData
tail(trainingData)
head(trainingData)
trainingFileName <- "pml-training.csv"
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
head(trainingData)
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
head(trainingData)
trainingData <- trainingData[,-c(1,2,3,4,5,6)]
head(trainingData)
tail(trainingData)
names(trainingData)
inTrain <- createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
data(iris)
dim(iris)
training <- trainingData[inTrain,]
testing <- trainingData[-inTrain,]
library(randomForest)
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training)
Rprof()
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training)
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training, trControl=traincontrol(number=5))
library(caret)
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training, trControl=traincontrol(number=5))
modelFit <- train(training$classe ~ .,method="rf",preProcess="pca",data=training)
modelFit
confusionMatrix(testing$classe,predict(modelFit,testing))
modelFit$finalModel
confusionMatrix(testing$classe,predict(modelFit,testing))
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
testFileName <- "pml-testing.csv"
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
head(testingData)
testingData <- testingData[sapply(testingData, function(x) !any(is.na(x)))]
head(testingData)
testingData <- testingData[,-c(1,2,3,4,5,6)]
head(testing)
names(testing)
names(testingData)
predictions <- predict(modFit, testingData)
predictions <- predict(modelFit, testingData)
print(predictions)
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainingSetUrl,file.path(path, testFileName))
path <- getwd()
download.file(trainingSetUrl,file.path(path, testFileName))
download.file(testSetUrl,file.path(path, testFileName))
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
testingData
testingData <- testingData[sapply(testingData, function(x) !any(is.na(x)))]
testingData <- testingData[,-c(1,2,3,4,5,6)]
testingData
predictions <- predict(modelFit, testingData)
print(predictions)
class(predictions)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictions)
predictions
getwd()
setwd("D:/RDirectory/Practical Machine Learning")
testFileName <- "pml-testing.csv"
download.file(testSetUrl,file.path(path, testFileName))
download.file(testSetUrl,file.path(path, testFileName))
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
path <- getwd()
if(!file.exists(path)){
dir.create(path)
}
download.file(testSetUrl,file.path(path, testFileName))
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
head(testingData)
testingData <- testingData[sapply(testingData, function(x) !any(is.na(x)))]
head(testingData)
testingData
predictions <- predict(modelFit, testingData)
print(predictions)
pml_write_files(predictions)
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
names(trainingData)
M <- abs(cor(training[,-60]))
trainingData <- trainingData[,-c(1,2,3,4,5,6)]
names(trainingData)
M <- abs(cor(training[,-54]))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
confusionMatrix(testing$classe,predict(modelFit,testing))
trainingSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
trainingSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
download.file(trainingSetUrl,file.path(path, trainingFileName))
path <- getwd()
download.file(trainingSetUrl,file.path(path, trainingFileName))
library(caret)
createDataPartition(y=trainingData$classe,p=0.7, list=FALSE)
library(caret)
path <- getwd()
if(!file.exists(path)){
dir.create(path)
}
trainingSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
if (!file.exists(trainingFileName)) {
download.file(trainingSetUrl,file.path(path, trainingFileName))
}
if (!file.exists(testFileName)) {
download.file(testSetUrl,file.path(path, testFileName))
}
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
head(trainingData)
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
trainingData <- trainingData[,-c(1,2,3,4,5,6)]
M <- abs(cor(trainingData[,-54]))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
names(trainingData)
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
names(trainingData)
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
names(trainingData)
head(trainingData)
library(caret)
path <- getwd()
if(!file.exists(path)){
dir.create(path)
}
trainingSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
if (!file.exists(trainingFileName)) {
download.file(trainingSetUrl,file.path(path, trainingFileName))
}
if (!file.exists(testFileName)) {
download.file(testSetUrl,file.path(path, testFileName))
}
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
head(trainingData)
trainingData <- trainingData[sapply(trainingData, function(x) !any(is.na(x)))]
trainingData <- trainingData[,-c(1,2,3,4,5,6)]
names(trainingData)
M <- abs(cor(trainingData[,-54]))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
names(trainingData)
trainingSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testSetUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
if (!file.exists(trainingFileName)) {
download.file(trainingSetUrl,file.path(path, trainingFileName))
}
if (!file.exists(testFileName)) {
download.file(testSetUrl,file.path(path, testFileName))
}
trainingData <- read.csv(file=trainingFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
testingData <- read.csv(file=testFileName,head=TRUE,sep=",",na.strings=c('NA','','#DIV/0!'))
